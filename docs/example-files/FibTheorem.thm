Kind nat type.
Type z nat.
Type s nat -> nat.

Define nat: nat -> prop by
; nat z
; nat (s X) := nat X.

Define lt: nat -> nat -> prop by
; lt z (s X)
; lt (s X) (s Y) := lt X Y.

Define leq: nat -> nat -> prop by
; leq z X
; leq (s X) (s Y) := leq X Y.

Define plus: nat -> nat -> nat -> prop by
; plus z X X
; plus (s X) Y (s Z) := plus X Y Z.

Define times: nat -> nat -> nat -> prop by
; times z X z
; times (s X) Y Z := exists U, times X Y U /\ plus U Y Z.

Define fib: nat -> nat -> prop by
; fib z z
; fib (s z) (s z)
; fib (s (s X)) K :=
    exists M N, fib X M /\ fib (s X) N /\ plus M N K.

Theorem plus_deterministic: forall x y u v, plus x y u -> plus x y v -> u = v.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to *H3 *H4. search.

Theorem times_deterministic: forall x y u v, times x y u -> times x y v -> u = v.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to *H3 *H5. apply plus_deterministic to *H4 *H6. search.

Theorem fib_deterministic: forall x y u, fib x y -> fib x u -> y = u.
induction on 1. intros. case H1.
  case H2. search.
  case H2. search.
  case H2.
    apply IH to *H3 *H6.
    apply IH to *H4 *H7.
    apply plus_deterministic to *H5 *H8. search.

Theorem lt_irreflexive: forall x, nat x -> lt x x -> false.
induction on 1. intros. case H1.
  case H2.
  case H2. apply IH to *H3 *H4.

Theorem plus_result_nat: forall x y k, nat x -> nat y -> plus x y k -> nat k.
induction on 3. intros. case H3.
  search.
  case H1. apply IH to *H5 *H2 *H4. search.

Theorem times_result_nat: forall x y k, nat x -> nat y -> times x y k -> nat k.
induction on 3. intros. case H3.
  search.
  case H1. apply IH to *H6 H2 *H4. apply plus_result_nat to *H7 *H2 *H5. search.

Import "damf:bafyreidw63tmv7hxruutqzgkajimbcd73m7tw2uf4xodhva4iy7e7beyai" as
Theorem fib_square_above: forall x, nat x ->
  leq (s^13 z) x ->
  forall y, times x x y ->
  forall u, fib x u -> lt y u.

Import "damf:bafyreibzzuhrgezgvug5gz7cflcdom2guliv64trckr62phrfipkz76mfq" as
Theorem sq1: times (s^1 z) (s^1 z) (s^1 z).

Import "damf:bafyreiefeka2f2ain6tgtmrykwod3t5but2fqr5kbkhfgmxstokn4l2miy" as
Theorem sq2: times (s^2 z) (s^2 z) (s^4 z).

Import "damf:bafyreieh7ibwsxo2qrqbrvcirwmo3zjit2jsknnufgsxzh6gkkml2di3ai" as
Theorem sq3: times (s^3 z) (s^3 z) (s^9 z).

Import "damf:bafyreidtxwiplpz4m5em7p2a2sykafhvnurouomfzvggok5ywlfwyhnhsq" as
Theorem sq4: times (s^4 z) (s^4 z) (s^16 z).

Import "damf:bafyreid335iyieieijrzjtkirxhxh3tkbznoqg4h3dq7epo5nyaomxre3y" as
Theorem sq5: times (s^5 z) (s^5 z) (s^25 z).

Import "damf:bafyreie2xxxeu3zi5knvpsdtdg4umjc3a5ftxbwh3deogv7tutzmfbx23m" as
Theorem sq6: times (s^6 z) (s^6 z) (s^36 z).

Import "damf:bafyreievaqyzj7msk5riqer2hxzqnejumuhgjkg2axfzhpmrk6csdwko2a" as
Theorem sq7: times (s^7 z) (s^7 z) (s^49 z).

Import "damf:bafyreibqtds3naf5tguv3efqafq3u6ah5oubimpq7xfie22vuduzuvqifi" as
Theorem sq8: times (s^8 z) (s^8 z) (s^64 z).

Import "damf:bafyreiaavgweydoks4a2emnzzsgry4ydibjxdkskpvex7etzfjm5wcxgo4" as
Theorem sq9: times (s^9 z) (s^9 z) (s^81 z).

Import "damf:bafyreib3zccmkk3avej6xrir3k5b4iqyst2l74kxsyy2msg5loxc7s2dja" as
Theorem sq10: times (s^10 z) (s^10 z) (s^100 z).

Import "damf:bafyreifeplrwfsi53wc54zit4kcp7w5bzlikqgmm4oeh6h4aftwp7amfvi" as
Theorem sq11: times (s^11 z) (s^11 z) (s^121 z).

Import "damf:bafyreiad3c3xmj67en7kjreyy4utvd5xngy5myqlm4qpbxwas25furewuq" as
Theorem sq12: times (s^12 z) (s^12 z) (s^144 z).

Import "damf:bafyreiczlelavo767bfowoiuwcfunyacws3kawpf2otah4l6oktxsc46vm" as
Theorem sq13: times (s^13 z) (s^13 z) (s^169 z).

Import "damf:bafyreif6qwt4t4u363rd6ulao2ndnodathmlxhdnci7ihe2l2brn74gbji" as
Theorem fib2: fib (s^2 z) (s^1 z).

Import "damf:bafyreicvry4lxxetbsfirrbqdk6yxpm6chxl5ggfaoh5m43qk2wkbcuft4" as
Theorem fib3: fib (s^3 z) (s^2 z).

Import "damf:bafyreiecavn2f654sbt6jbpeyxos4mkj3li7rc6anbdnuspur4p5dgjzku" as
Theorem fib4: fib (s^4 z) (s^3 z).

Import "damf:bafyreid7jqnxcnreuurqkmkntzq3ehqwyojwmwxewof2tw74w7enwkr3cy" as
Theorem fib5: fib (s^5 z) (s^5 z).

Import "damf:bafyreif3kwe2aob5kzopjan4sqjkqcrzb53sy7ap2uzij2lz4pegse4bby" as
Theorem fib6: fib (s^6 z) (s^8 z).

Import "damf:bafyreiapatsma646qr6akdodevb4buqvyi3lmglvxx2em257ewqinbmzcu" as
Theorem fib7: fib (s^7 z) (s^13 z).

Import "damf:bafyreiavpm3kbbbnkbc4wjdnddzatkhd2bbinnuakfwabhjjvndi5agvky" as
Theorem fib8: fib (s^8 z) (s^21 z).

Import "damf:bafyreihoggwuzdglzsmqqs22ol36quxapwmlc44n6klgyemoxhwp2yiuze" as
Theorem fib9: fib (s^9 z) (s^34 z).

Import "damf:bafyreibrd7gzgwvf2kpq7vo4wq4ra4syz2j5jcuiljtkstvyo5eoz7lcem" as
Theorem fib10: fib (s^10 z) (s^55 z).

Import "damf:bafyreiha77e5cuhrp3nnwyawqiidhbuisdrty2enxgkhwjosrgdylxfvvm" as
Theorem fib11: fib (s^11 z) (s^89 z).

Import "damf:bafyreibiw3niyqh5ecmqociablot4nuqvmhp4skbft7e63et22qruehj44" as
Theorem fib12: fib (s^12 z) (s^144 z).

Import "damf:bafyreifgvdfqd7frf6zh2n5luatlqhftmvwmnculnvtxjihy732vwjfh6u" as
Theorem fib13: fib (s^13 z) (s^233 z).

Theorem fib_squares: forall x x2, nat x -> times x x x2 ->
  (fib x x2 -> x = z \/ x = s z \/ x = s^12 z) /\
  (x = z \/ x = s z \/ x = s^12 z -> fib x x2).
intros Hnat Hsquare. split.
%% ->
intros Hfib.
Hcs: assert x = s^0 z \/ x = s^1 z \/ x = s^2 z \/ x = s^3 z
         \/ x = s^4 z \/ x = s^5 z \/ x = s^6 z \/ x = s^7 z
         \/ x = s^8 z \/ x = s^9 z \/ x = s^10 z \/ x = s^11 z
         \/ x = s^12 z \/ leq (s^13 z) x.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  Hnat: case Hnat. search.
  right. search 14.
Hcs: case Hcs.
  search. % case of x = z
  search. % case of x = s z
  % case of x = 2
  apply fib_deterministic to fib2 Hfib.
  apply times_deterministic to sq2 Hsquare.
  % case of x = 3
  apply fib_deterministic to fib3 Hfib.
  apply times_deterministic to sq3 Hsquare.
  % case of x = 4
  apply fib_deterministic to fib4 Hfib.
  apply times_deterministic to sq4 Hsquare.
  % case of x = 5
  apply fib_deterministic to fib5 Hfib.
  apply times_deterministic to sq5 Hsquare.
  % case of x = 6
  apply fib_deterministic to fib6 Hfib.
  apply times_deterministic to sq6 Hsquare.
  % case of x = 7
  apply fib_deterministic to fib7 Hfib.
  apply times_deterministic to sq7 Hsquare.
  % case of x = 8
  apply fib_deterministic to fib8 Hfib.
  apply times_deterministic to sq8 Hsquare.
  % case of x = 9
  apply fib_deterministic to fib9 Hfib.
  apply times_deterministic to sq9 Hsquare.
  % case of x = 10
  apply fib_deterministic to fib10 Hfib.
  apply times_deterministic to sq10 Hsquare.
  % case of x = 11
  apply fib_deterministic to fib11 Hfib.
  apply times_deterministic to sq11 Hsquare.
  % case of x = 12
  search.
  % case of x >= 13
  H: apply fib_square_above to Hnat Hcs.
  H: apply *H to Hsquare.
  H: apply *H to Hfib.
  Hnat2: apply times_result_nat to Hnat Hnat Hsquare.
  apply lt_irreflexive to Hnat2 H.

%% <-
intros Hcs.
Hcs: case Hcs.
  case Hsquare. search.
  apply times_deterministic to sq1 Hsquare. search.
  apply times_deterministic to sq12 Hsquare. backchain fib12.
